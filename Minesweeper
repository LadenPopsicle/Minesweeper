import java.util.Scanner;
import java.util.Random;

public class Minesweeper{
 private static int side;
 private static int howManyMines = 0;
 
  public static void displayGrid(char [][] playerGrid) {         //displays the initial grid, without any triggered mines
   for(int row=0; row < playerGrid.length; row++) {
      for(int col=0; col < playerGrid[row].length; col++) {
       playerGrid[row][col] = 'O';
       System.out.print(playerGrid[row][col] + ' ');   
    }
      System.out.println();
   }
  }
  
/*   public static char [][] hitMines (int side, char mine){       //Could use this to check if there is a mine Character.isLetter()
     char[][] compGrid = new char [side][side];                  //compGrid is the grid that only the computer sees. It shows the mine locations
     for(int i=0; i < grid.length; i++) {
       for(int j=0; j < grid[i].length; j++) {
       // compGrid[][] = howManyMines;               //it's incomplete because I'm not sure how to randomly place the mines
       }
      }
 }
 */
 
  public static char[][] genPuzzle(int side, int mine){ 
    Random r = new Random();
    char[][] arr = new char [side][side];  
    int counter= 0; //I guess we can use this to keep track of how many mines there are already while we add them
    while(counter<mine){
      int checkX = r.nextInt(side);
      int checkY = r.nextInt(side);
      if(!((arr[checkX][checkY])=='#')){
        arr[checkX][checkY] = '#';
        counter ++;
    }
   }
   // The above while loop placed the mines 
    return arr;
 }

   public static void main(String[] args) {         
     System.out.println("Enter the number of rows.");
     Scanner ut = new Scanner(System.in);
     int side = ut.nextInt();
     int howManyMines = (int) ((Math.random() * (0.25*side*side - 0.15*side*side +1)) + 0.15*side*side +1);  //how many mines total in a game, determined based on teh size of the grid, which the user enters
     //String[][] grid = new String [side][side];
      String[][] grid= genPuzzle(side, howManyMines);
     displayGrid(grid);                         //displays starting grid
   
    
   } 
}


 
